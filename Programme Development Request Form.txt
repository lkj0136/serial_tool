Serial Manager Application 개발 의뢰서
1. 프로젝트 개요
1.1. 프로젝트 이름: Serial Manager Application

1.2. 목적: 다양한 시리얼 포트를 동시에 관리하고, 데이터 송수신, 파일 전송 및 포트 상태 모니터링 기능을 제공하는 GUI 기반의 응용 프로그램을 개발합니다. 이 프로그램은 여러 시리얼 장치와의 통신을 쉽게 처리할 수 있도록 도와줍니다.

1.3. 기술 스택:
 - 디자인패턴(MVC, MVP, MVVM)
 - Python 3.x
 - PyQt5 (GUI 개발)
 - PySerial (시리얼 통신)
 - threading (멀티스레딩)
 - logging (로그 기록)
 - configparser (설정 파일 관리)
 - 기타 

2.프로그램 설명
Serial Manager Application은 최대 4개의 시리얼 포트를 동시에 관리하고, 각 포트에 대해 실시간 데이터를 송수신, 파일 전송, 포트 모니터링 기능을 제공합니다. 각 포트에 대해 별도의 설정이 합니다. 이 프로그램은 UI를 통해 사용자가 쉽게 포트를 관리하고 데이터를 처리할 수 있도록 설계되었습니다.

또한 설정 파일을 통해 사용자가 환경을 저장 및 불러올 수 있으며, 프로그램의 자동 업데이트 기능을 제공하여 최신 버전을 유지할 수 있습니다.

MVC, MVP, MVVM 구조 중 하나를 선택한다.

3.주요 기능
3.1. 시리얼 포트 관리
 - 최대 4개의 시리얼 포트를 동시에 비동기적으로 관리 가능.
 - 각 포트 설정(포트 번호, baudrate, 데이터 비트, 정지 비트, 패리티)을 UI에서 설정 가능.
 - 포트 열기 및 닫기 기능.
 - 설정 파일을 통해 포트 설정을 저장 및 불러오기 가능.
 - 사용 가능한 시리얼 포트 목록을 실시간으로 UI에 갱신.
 - 만약 포트 연결이 끊어지거나 오류가 발생하면 자동으로 재연결을 시도
 - 포트 연결 실패 등 예외 처리

3.2. 데이터 송수신
 - 각 포트로부터 데이터를 실시간으로 수신하여 UI에 표시.
 - 사용자 입력 데이터를 각 포트로 전송.
 - 비동기 처리로 데이터 송수신을 효율적으로 관리.
 - 수신된 데이터와 전송된 데이터를 별도의 로그 파일로 저장
 - 데이터 전송 오류 등 예외처리

3.3 파일 전송
 - 파일 경로를 입력하여 선택된 포트로 파일 내용을 전송.
 - 전송 파일명, 전송 프로그래스를 UI에 표시
 - 파일 전송 중단 가능
 - 파일 오류, 데이터 전송 오류 등 예외 처리

3.4. 포트 상태 모니터링
 - 각 포트의 상태를 실시간으로 모니터링.
 - 포트가 열려 있는지, 데이터가 수신되었는지 여부를 UI에서 확인 가능.

3.5. 로그 기록
 - 프로그램 동작 상태와 에러를 로그 파일로 기록.
 - 로그 활성화 비활성화 관리
 - critical, error, warning, info, debug 등 세부화 해서 기록

3.6. 설정파일 관리
 - 설정 파일 저장: 사용자는 포트 설정과 프로그램 환경을 설정 파일로 저장할 수 있습니다.
 - 설정 파일 불러오기: 저장된 설정 파일을 불러와, 이전 환경 UI에 적용합니다.
 - 마지막 상태 유지: 프로그램 종료시 설정을 자동 저장, 프로그램 실행 시 자동 저장된 설정 파일을 자동으로 불러와 이전 환경 UI에 복원합니다.

3.7. 자동 업데이트
 - 업데이트 확인: 프로그램 실행 시 자동으로 업데이트를 확인합니다.
 - 업데이트 다운로드 및 설치: 새로운 버전이 있을 경우 사용자가 직접 승인하거나 자동으로 업데이트를 다운로드하고 설치합니다.
 - 사용자 알림: 업데이트가 완료되면 사용자에게 알림을 제공합니다.

3.8. 포트 상태 알람
 - 포트 상태가 변경될 때 사용자에게 알림을 제공합니다.
 - 포트가 열리거나 닫힐 때, 데이터가 수신될 때 알림을 표시합니다.

3.9. 자동화 스크립트
 - 특정 작업을 자동으로 수행할 수 있는 스크립트 기능을 제공합니다.
 - 사용자는 반복 전송할 데이터와 간격을 설정하여 자동으로 데이터를 전송할 수 있습니다.

3.10. 사용자 설정 프로필
 - 사용자 설정을 저장하고 불러올 수 있는 프로필 기능을 제공합니다.
 - 사용자는 포트 설정과 프로그램 환경을 프로필로 저장하고, 필요할 때 불러올 수 있습니다.

4. 상세 기능 설명
4.1. 시리얼 포트 관리
 - 포트 목록 갱신: 사용 가능한 시리얼 포트 목록을 실시간으로 UI에 갱신합니다.
 - 포트 설정: 사용자는 UI에서 각 포트에 대해 포트 번호(NONE 포함, 사용가능한 포트 리스트)와  baudrate, 데이터 비트, 정지 비트, 패리티 설정할 수 있습니다. 설정된 포트는 Open/Close 버튼으로 포트를 열고/닫을 수 있습니다, 포트가 열리기 전에만 변경할 수 있습니다. 포트가 열린 상태에서는 설정을 변경할 수 없으며, 포트를 닫은 후에만 설정을 변경할 수 있습니다.
 - 포트 열기: 사용자가 설정한 설정에 따라 시리얼 포트를 엽니다. (NONE은 포트를 열지 않습니다.)
 - 포트 닫기: 열려 있는 모든 포트를 닫습니다.
 - 설정 파일 관리: 포트 설정을 설정 파일로 저장하고, 프로그램 실행 시 불러옵니다. 설정 파일은 INI 형식으로 관리되며, configparser 모듈을 사용하여 처리됩니다.
 - 포트 재연결: 만약 포트 연결이 끊어지거나 오류가 발생하면 자동으로 재연결을 시도합니다.

4.2. 데이터 송수신
 - 데이터 수신: 각 포트에서 수신된 데이터는 실시간으로 해당 포트에 연결된 텍스트 박스에 표시됩니다.
 - 데이터 송신: 사용자는 UI에서 데이터를 입력하고, Send Data 버튼을 클릭하여 연결된 모든 포트로 데이터를 전송할 수 있습니다.
 - 반복 데이터 송신 : 사용자는 UI에서 데이터를 입력하고, Repeat Send Data 버튼을 클릭하여, UI 텍스트 박스의 N 횟수만큼 T 시간 간격으로 연결된 모든 포트로 데이터를 전송할 수 있습니다. 전송된 횟수는 실시간으로 UI의 반복 전송 카운트에 나타냅니다.
 - 비동기 처리: 데이터 송수신 작업은 비동기적으로 처리되어 UI 응답성을 유지합니다. 이를 위해 asyncio와 threading을 활용합니다.

4.3. 파일 전송
 - 파일 경로 입력: 사용자는 파일 경로를 UI에 입력하여 Start File Transfer 버튼을 클릭하면 파일의 내용을 연결된 포트로 전송할 수 있습니다.
 - 파일 전송 과정: 파일의 내용을 읽어 한 줄씩 전송하며, 전송 과정에서 발생하는 오류는 로그에 기록됩니다.
 - 프로그래스바 : 파일 전송 진행율을 UI의 프로그래스바에 실시간으로 나타냅니다.
 - 파일 전송 중단 : Stop File Transfer 버턴을 클릭하면 파일 전송을 중단할 수 있습니다.

4.4. 포트 상태 모니터링
 - 포트 상태 표시: 포트가 열리거나 닫히는 상태를 UI에서 실시간으로 확인할 수 있습니다.
 - 데이터 수신 상태 표시: 데이터가 수신되면 해당 포트의 텍스트 박스에 즉시 표시됩니다.

4.5. 로그 기록
 - 로그 기록: 프로그램의 모든 주요 동작과 에러는 logging 모듈을 통해 로그 파일에 기록됩니다. 이 로그는 문제 발생 시 디버깅에 사용될 수 있습니다.

4.6. 설정 파일 관리
 - 설정 파일 저장: 사용자는 포트 설정과 프로그램 환경을 설정 파일로 저장할 수 있습니다.
 - 설정 파일 불러오기: 프로그램 실행 시 저장된 설정 파일을 자동으로 불러와 이전 환경을 복원합니다.

4.7. 자동 업데이트
 - 업데이트 확인: 프로그램 실행 시 자동으로 업데이트를 확인합니다.
 - 업데이트 다운로드 및 설치: 새로운 버전이 있을 경우 사용자가 직접 승인확인 후 자동으로 업데이트를 다운로드하고 설치합니다. 진행율을 프로그래스바 UI에 실시간으로 나타냅니다.
 - 사용자 알림: 업데이트가 완료되면 사용자에게 알림을 제공합니다.
 - 업데이트 중단 : 업데이트 다운로드 과정에서 사용자가 중단 버튼을 누르면 다운로드가 중단됩니다.

4.8. 포트 상태 알람
 - 포트 상태 변경 알림: 포트가 열리거나 닫힐 때, 데이터가 수신될 때 사용자에게 알림을 제공합니다.
 - 알림 방식: 시스템 트레이 알림을 통해 사용자에게 상태 변화를 알립니다.
 - 알림 설정: 사용자는 알림을 활성화하거나 비활성화할 수 있습니다.

4.9. 자동화 스크립트
 - 스크립트 설정: 사용자는 반복 전송할 데이터와 간격을 설정할 수 있습니다.
 - 스크립트 실행: 설정된 간격으로 데이터를 반복적으로 전송합니다.
 - 스크립트 중단: 사용자는 스크립트를 중단할 수 있습니다.

4.10. 사용자 설정 프로필
 - 프로필 저장: 사용자는 포트 설정과 프로그램 환경을 프로필로 저장할 수 있습니다.
 - 프로필 불러오기: 저장된 프로필을 불러와 이전 환경을 복원합니다.

5. UI 구성 요소
5.1. 메인 윈도우 (QMainWindow)
 - 프로그램의 기본 창입니다. 모든 UI 요소들이 이 안에 배치됩니다.
 - 창의 제목은 "Serial Manager"로 설정되어 있으며, 메인 창에서 사용자가 시리얼 포트와 관련된 모든 작업을 수행할 수 있습니다.

5.2. 메뉴 바 (QMenuBar)
 - File 메뉴
    * Exit 메뉴 항목: 프로그램을 종료할 수 있는 기능을 제공합니다. 사용자가 이 메뉴를 클릭하면 프로그램이 안전하게 종료됩니다.
 - 메뉴 바는 사용자가 프로그램의 설정이나 도구를 빠르게 접근할 수 있도록 상단에 위치합니다.

5.3.버튼들
 - Open Ports 버튼 (QPushButton)
    * 사용자가 설정한 포트를 엽니다. 포트가 성공적으로 열리면 포트 상태가 UI에 표시됩니다.
    * 시리얼 클로우즈시 활성화
 - Close Ports 버튼 (QPushButton)
    * 열려 있는 모든 포트를 닫습니다.
    * 시리얼 오픈시 활성화
 - Send Data 버튼 (QPushButton)
    * 사용자가 입력한 데이터를 연결된 포트로 전송합니다.
    * 시리얼 오픈시 활성화
 - Multi Send Data 버튼 (QPushButton)
    * 사용자가 입력한 데이터를 연결된 포트로 반복 전송합니다.
    * 시리얼 오픈시 활성화
 - Start File Transfer 버튼 (QPushButton)
    * qfiledialog를 통해 받은 파일을 연결된 포트로 전송합니다.
    * 시리얼 오픈시 활성화
 - Stop File Transfer 버튼 (QPushButton)
    * 전송을 중단 합니다.
    * 파일 전송 중 활성화

5.4. 포트 설정 섹션 x 4
 - 포트 선택 콤보박스 (QComboBox)
    * 사용 가능한 시리얼 포트를 선택할 수 있는 드롭다운 메뉴입니다. 최대 4개의 포트를 관리할 수 있으며, 각 포트에 대해 개별적인 설정이 가능합니다.
    * 사용 가능한 포트는 프로그램 실행 시 자동으로 갱신되며, "NONE" 옵션이 기본적으로 포함되어 있습니다. "NONE"을 선택하면 해당 포트는 사용하지 않음을 의미합니다.
 - Baudrate 선택 콤보박스 (QComboBox)
    * 각 포트의 통신 속도(Baudrate)를 설정할 수 있는 드롭다운 메뉴입니다. 일반적인 시리얼 통신 속도(9600, 19200, 115200 등)를 제공합니다.
 - 데이터 비트 (QComboBox)
    * 각 포트의 데이터 비트 크기(bytesize)를 설정할 수 있는 드롭다운 메뉴입니다. 일반적인 시리얼 통신 크기(8, 7, 6 등)를 제공합니다.
 - 정지 비트 (QComboBox)
    * 각 포트의 정지 비트(stopbit)를 설정할 수 있는 드롭다운 메뉴입니다. 일반적인 시리얼 정지비트(1, 1.5, 2)를 제공합니다.

5.5. 데이터 송수신 섹션
 - 데이터 입력 텍스트 박스 (QTextEdit)
    * 사용자가 전송할 데이터를 입력하는 공간입니다. 사용자는 포트가 열리고 이곳에 텍스트를 입력하고 Send Data 버튼 또는 Multi Send Data 버튼 통해 데이터를 전송할 수 있습니다.
 - 반복 전송 카운트 (QTextEdit)
    * 반복 전송된 횟수를 표시합니다.
    * 읽기 전용 
 - 반복 전송 횟수 설정 (QTextEdit)
    * 반복 전송할 횟수를 설정합니다.
 - 반복 전송 시간 설정 (QTextEdit)
    * 반복 전송할 시간을 설정합니다.
    * 단위 : ms
 - 수신 데이터 표시 텍스트 박스 x 4(QTextEdit)
    * 각 포트로부터 수신된 데이터를 실시간으로 표시하는 텍스트 박스입니다. 포트가 열리고 데이터가 수신되면 해당 포트에 연결된 텍스트 박스에 표시됩니다.
    * 읽기 전용

5.6. 파일 전송 세션
 - 파일 경로 텍스트 박스 (QTextEdit)
   * 전송하고 있는 파일명을 표시하는 텍스트 박스입니다.
   * 읽기 전용
 - 파일 전송 진행율 x 4 (QProgressBar)
   * 파일 전송 진행율을 각 포트별로 실시간으로 표시합니다.

5.7. 상태 표시줄 (QStatusBar)
 - 시리얼 포트의 상태나 프로그램의 다른 주요 상태 정보를 실시간으로 표시합니다.
 - 포트가 열리거나 닫힐 때, 또는 데이터가 송수신될 때 상태가 갱신됩니다.

6. 주의사항
6.1. UI 설계:
 - UI는 직관적이고 사용하기 쉽게 설계되어야 합니다. 초보자도 쉽게 사용할 수 있도록 도움말이나 툴팁을 추가하는 것도 고려해야 합니다.
 - UI 전반에 걸쳐 일관된 색상, 폰트, 버튼 스타일을 유지해야 합니다. 이는 사용자 경험을 향상시키고, 사용자가 UI를 쉽게 이해할 수 있도록 합니다.
 - 텍스트 요소(라벨, 버튼 텍스트, 텍스트 박스 등)는 가독성을 위해 적절한 폰트 크기를 유지해야 합니다. 일반적으로 중요한 정보는 약간 더 큰 폰트로, 부가적인 정보는 더 작은 폰트로 표시합니다.
 - UI 요소들은 논리적이고 사용자가 쉽게 이해할 수 있도록 배치되어야 합니다. 공간이 부족한 경우, 요소들 간의 간격을 조정하여 혼잡해 보이지 않도록 해야 합니다.
 - 버튼 클릭, 포트 열기/닫기 등의 동작에 대해 시각적 피드백(예: 색상 변화, 상태 메시지 등)을 제공하여 사용자가 작업이 정상적으로 처리되었는지 확인할 수 있도록 해야 합니다.
 - 색상 대비, 텍스트 크기 조정 등 접근성을 고려한 스타일을 적용해야 합니다. 이는 다양한 사용자들이 쉽게 사용할 수 있도록 보장합니다.
6.2. 에러 처리:
 - 시리얼 통신 과정에서 발생할 수 있는 다양한 예외 상황(포트 연결 실패, 데이터 전송 오류 등)을 철저하게 처리해야 합니다. 모든 예외는 사용자에게 명확하게 표시되며, 로그에 기록되어야 합니다.
6.3. 성능 최적화
 - 여러 포트를 동시에 다루기 때문에, 성능 저하가 발생하지 않도록 멀티스레딩 및 비동기 처리를 최적화해야 합니다.
6.4. 확장성 고려
 - 앞으로의 기능 확장을 고려하여 코드 구조를 설계해야 합니다. 예를 들어, 추가적인 포트 설정 옵션이나 새로운 데이터 형식에 쉽게 대응할 수 있어야 합니다.
6.5. 설정 파일 관리:
 - 설정 파일은 반드시 사용자가 이해할 수 있는 구조로 만들어야 하며, 설정 변경이 필요할 때 사용자가 쉽게 접근하고 수정할 수 있어야 합니다.
6.6. 데이터/파일 송/수신 안정성:
- 데이터 손실이나 프로그램 충돌이 발생하지 않도록 충분한 안정성 테스트가 진행되야 합니다.
6.7. 자동 업데이트 안정성:
 - 자동 업데이트 과정에서 데이터 손실이나 프로그램 충돌이 발생하지 않도록 충분한 안정성 테스트가 진행되야 합니다.

7. 프로그램 설계
7.1 모델
 - MVC, MVP, MVVM 모델중 적합한 모델을 선정하여 적용한다.
7.2. 구글 스타일 적용
7.3. 타입 힌트 사용
7.4. 일관된 네이밍 컨벤션:
 - 클래스 이름은 CamelCase 스타일로, 메소드와 변수 이름은 snake_case 스타일로 작성합니다. 예: SerialManager, send_data_to_port.
7.5. 주석 작성:
 - 각 클래스, 메소드, 함수에는 그 목적을 설명하는 주석을 추가합니다. 코드의 중요한 부분이나 복잡한 로직에는 상세한 주석을 작성하여 유지보수성을 높입니다.
7.6. 들여쓰기와 공백
 - PEP 8 스타일 가이드를 준수하여 4칸의 공백을 들여쓰기 단위로 사용합니다. 코드 블록 간에 적절한 공백을 두어 가독성을 높입니다.
7.7. 명확한 메소드 명칭:
 - 메소드 이름은 그 기능을 명확히 드러내야 합니다. 역할이 명확하지 않은 경우, 더 구체적인 이름으로 변경합니다.
7.8. 코드 정리 및 일관성 유지:
 - 불필요한 코드나 사용되지 않는 변수를 제거합니다. 또한, 코드 작성 시 일관된 스타일을 유지하여 유지보수성을 높입니다.
7.9. 예외 처리:
 - 예상 가능한 예외 상황에 대한 처리 코드를 포함하며, 예외 처리 부분에도 주석을 달아 예외의 원인과 해결 방안을 명확히 합니다.
7.10. 파일간 역할 구분
 - 파일간 역할을 구분하여, 코드를 명확하고 확장에 유리하도록 합니다.
